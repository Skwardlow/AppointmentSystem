package ru.eltex.project.simpleappointer.entities;

import lombok.NoArgsConstructor;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.persistence.*;
import java.util.Collection;
import java.util.Set;


/**
 * User representation class
 * @author skwardlow
 * @version 1.0
 * @see UserDetails
 * @see Table
 * @see NoArgsConstructor
 * */
@lombok.Setter
@lombok.Getter

@Entity
@Table(name ="usr")
@NoArgsConstructor
public class User implements UserDetails {
    /**
     * An id field for DB identification, automatically generated by db
     * @see Id
     * @see GeneratedValue
     * */
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    private Integer id;
    /**
     * Name of user field (Firstname, lastnem etc)
     * */
    protected String name;
    /**
     * User phone field
     * */
    protected String phone;
    /**
     * User email field
     * */
    protected String email;
    /**
     * User username field for authentication
     * */
    protected String username;
    /**
     * User password field for authentication
     * */
    protected String password;
    /**
     * User account activity field
     * */
    private boolean active;
    /**
     * User role field for using in authorities in Spring security
     * creates and wires with User_role field.
     * user identifies by user_id field in table
     * @see CollectionTable
     * @see Role
     * @see Enumerated
     */
    @ElementCollection(targetClass = Role.class, fetch = FetchType.EAGER)
    @CollectionTable(name = "user_role", joinColumns = @JoinColumn(name = "user_id"))
    @Enumerated(EnumType.STRING)
    private Set<Role> roles;
    /**
     * Simple user constructor for saving and creating a new user object
     * for noargs
     * @see NoArgsConstructor
     * */
    public User(String name, String phone, String email,String username, String password){
        this.name = name;
        this.phone = phone;
        this.email = email;
        this.username = username;
        this.password = password;
    }

    /**
     * An default generated by UserDetails method, required by Spring security account management
     * @see UserDetails
     * @return Collection of Current user authorities
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return getRoles();
    }
    /**
     * An default generated by UserDetails method, required by Spring security account management
     * @see UserDetails
     * @return String with username for authentication
     */
    @Override
    public String getUsername() {
        return username;
    }

    /**
     * An default generated by UserDetails method, required by Spring security account management
     * @see UserDetails
     * @return boolean with account  IsNonExpired answer
     */
    @Override
    public boolean isAccountNonExpired() {
        return true;
    }
    /**
     * An default generated by UserDetails method, required by Spring security account management
     * @see UserDetails
     * @return boolean with account isNonLocked answer
     */
    @Override
    public boolean isAccountNonLocked() {
        return true;
    }
    /**
     * An default generated by UserDetails method, required by Spring security account management
     * @see UserDetails
     * @return boolean with account  IsCredentialsNonExpired answer
     */
    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }
    /**
     * An default generated by UserDetails method, required by Spring security account management
     * @see UserDetails
     * @return boolean with account  IsEnabled answer
     */
    @Override
    public boolean isEnabled() {
        return true;
    }
    /**
     * An default generated by UserDetails method, required by Spring security account management
     * @see UserDetails
     * @return boolean with account  IsActive answer
     */
    public boolean isActive() {
        return active;
    }
}
